{"version":3,"sources":["logo.svg","Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createDb","window","indexedDB","UsersData","email","password","fullname","id1","Math","random","toString","replace","id2","MessagesData","mid","date","Date","toGMTString","subject","body","fromMail","ToData","toMail","request","open","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","objectStore","autoIncrement","then","e","tx","transaction","txm","txt","forEach","message","add","user","console","log","onerror","error","targer","errorCode","onsuccess","target","result","Login","className","onClick","App","localStorage","getItem","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,0FCErCC,G,gBAAU,WACZ,GAAIC,OAAOC,UAGN,CAED,IAAIC,EAAY,CACZ,CAAEC,MAAM,mBAAoBC,SAAW,OAAQC,SAAW,UAC1D,CAACF,MAAM,iBAAkBC,SAAW,OAAQC,SAAW,QACvD,CAACF,MAAM,mBAAoBC,SAAW,OAAQC,SAAW,UACzD,CAACF,MAAM,kBAAmBC,SAAW,OAAQC,SAAW,UAExDC,GAAoB,GAAdC,KAAKC,UAAaC,SAAS,IAAIC,QAAQ,IAAI,IACjDC,GAAoB,GAAdJ,KAAKC,UAAaC,SAAS,IAAIC,QAAQ,IAAI,IACjDE,EAAe,CACf,CAAEC,IAAIP,EAAMQ,MAAM,IAAIC,MAAOC,cAAeC,QAAU,QAASC,KAAM,sBAAuBC,SAAW,kBACvG,CAACN,IAAKF,EAAIG,MAAM,IAAIC,MAAOC,cAAeC,QAAU,KAAKC,KAAM,8BAA+BC,SAAW,qBAEzGC,EAAS,CACT,CAAEP,IAAKP,EAAIe,OAAS,oBACpB,CAACR,IAAKF,EAAKU,OAAS,oBACpB,CAACR,IAAKF,EAAKU,OAAS,mBAEpBC,EAAUtB,OAAOC,UAAUsB,KAAK,SAAS,GAAE,SAACC,GACxCA,EAAGC,iBAAiBC,SAAS,UACXF,EAAGG,kBAAkB,QAAS,CAACC,QAAS,UAC9CC,YAAY,QAAQ,QAAS,CAACC,QAAQ,IAUlD,IAAIN,EAAGC,iBAAiBC,SAAS,YAAa,CAC1C,IAAIK,EAAcP,EAAGG,kBAAkB,WAAY,CAACC,QAAS,QAC7DG,EAAYF,YAAY,WAAW,WAAY,CAACC,QAAQ,IACxDC,EAAYF,YAAY,MAAM,MAAO,CAACC,QAAQ,IAWlD,IAAIN,EAAGC,iBAAiBC,SAAS,SAAU,CACvC,IAAIK,EAAcP,EAAGG,kBAAkB,QAAS,CAACK,eAAc,IAC/DD,EAAYF,YAAY,SAAS,SAAU,CAACC,QAAQ,IACpDC,EAAYF,YAAY,MAAM,MAAO,CAACC,QAAQ,QAe1DR,EAAQW,MAAK,SAACC,GACF,IAAIC,EAAKD,EAAEE,YAAY,QAAS,aAAaL,YAAY,SACrDM,EAAMH,EAAEE,YAAY,WAAY,aAAaL,YAAY,aACzDO,EAAMJ,EAAEE,YAAY,QAAS,aAAaL,YAAY,SAC1DX,EAAOmB,SAAQ,SAAUC,GACrBF,EAAIG,IAAID,MAEZtC,EAAUqC,SAAQ,SAAUG,GACxBP,EAAGM,IAAIC,MAEX9B,EAAa2B,SAAQ,SAAUC,GAC3BH,EAAII,IAAID,GACRG,QAAQC,IAAI,2BAG5BtB,EAAQuB,QAAS,SAACX,GACdS,QAAQG,MAAM,WAAYZ,EAAEa,OAAOC,YAEvC1B,EAAQ2B,UAAW,SAACf,GAEXA,EAAEgB,OAAOC,aAtFlBR,QAAQG,MAAM,8BAoJPM,MAVf,WAEI,OACI,yBAAKC,UAAU,aACX,4BAAQC,QAASvD,GAAjB,iBCjIGwD,MAZf,WACE,OACE,yBAAKF,UAAU,OAEZrD,OAAOwD,aAAaC,QAAQ,cAE9B,yBAAKJ,UAAU,iBAAf,KADC,kBAAC,EAAD,QCEcK,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.41cef5c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react'\n\nconst createDb= ()=>{\n    if(!window.indexedDB){\n        console.error(\"browser is not supported\")\n    }\n    else {\n        // let db;\n        let UsersData = [\n            { email:\"sravan@email.com\", password : \"1234\", fullname : \"sravan\"},\n            {email:\"bala@email.com\", password : \"1234\", fullname : \"bala\"},\n            {email:\"vishnu@email.com\", password : \"1234\", fullname : \"vishnu\"},\n            {email:\"naidu@email.com\", password : \"1234\", fullname : \"naidu\"}    \n        ]\n        let id1 =(Math.random()*16).toString(32).replace(\".\",\"\") ;\n        let id2 =(Math.random()*16).toString(32).replace(\".\",\"\") ;\n        let MessagesData = [\n            { mid:id1 , date: new Date().toGMTString(), subject : \"hello\", body: \"hi sravan from bala\", fromMail : \"bala@email.com\"},\n            {mid: id2,date: new Date().toGMTString(), subject : \"hi\",body: \"hi sravan, bala from sravan\", fromMail : \"sravan@email.com\"},\n        ] \n        let ToData = [\n            { mid: id1,toMail : \"sravan@email.com\"},\n            {mid: id2, toMail : \"sravan@email.com\"},\n            {mid: id2, toMail : \"bala@email.com\"},\n        ] \n        let request = window.indexedDB.open(\"MailDB\",1,(db)=>{\n            if(!db.objectStoreNames.contains(\"Users\")) {\n                let objectStore = db.createObjectStore(\"Users\", {keyPath: \"email\"})\n                objectStore.createIndex(\"email\",\"email\", {unique: true});\n             \n                // objectStore.transaction.oncomplete = (ev) => {\n                //     console.log(\"transaction\", ev);\n                //    let userStore= db.transaction(\"Users\", \"readwrite\").objectStore(\"Users\");\n                //    UsersData.forEach(function (user){\n                //        userStore.add(user);\n                //    });\n                // }\n            }\n                if(!db.objectStoreNames.contains(\"Messages\")) {\n                    let objectStore = db.createObjectStore(\"Messages\", {keyPath: \"mid\"})\n                    objectStore.createIndex(\"fromMail\",\"fromMail\", {unique: false});\n                    objectStore.createIndex(\"mid\",\"mid\", {unique: true});\n                 \n                    // objectStore.transaction.oncomplete = (ev) => {\n                    //     console.log(\"transaction\", ev);\n                    //    let messageStore= db.transaction(\"Messages\", \"readwrite\").objectStore(\"Messages\");\n                    //    MessagesData.forEach(function (message){\n                    //        messageStore.add(message);\n                    //        console.log(\"mesages completed\")\n                    //    });\n                    // }\n                }\n                if(!db.objectStoreNames.contains(\"ToBox\")) {\n                    let objectStore = db.createObjectStore(\"ToBox\", {autoIncrement:true});\n                    objectStore.createIndex(\"toMail\",\"toMail\", {unique: false});\n                    objectStore.createIndex(\"mid\",\"mid\", {unique: false});\n                 \n                    // objectStore.transaction.oncomplete = (ev) => {\n                    //     console.log(\"transaction\", ev);\n                    //    let messageStore= db.transaction(\"ToBox\", \"readwrite\").objectStore(\"ToBox\");\n                    //    ToData.forEach(function (message){\n                    //        messageStore.add(message);\n                    //    });\n                        \n                    // }\n                }\n        });\n        // {email:\"bala@email.com\", password : \"1234\", fullname : \"bala\"},\n        // {email:\"vishnu@email.com\", password : \"1234\", fullname : \"vishnu\"},\n        // {email:\"naidu@email.com\", password : \"1234\", fullname : \"naidu\"}\n        request.then((e)=>{\n                    let tx = e.transaction(\"Users\", \"readwrite\").objectStore(\"Users\");\n                    let txm = e.transaction(\"Messages\", \"readwrite\").objectStore(\"Messagess\")\n                    let txt = e.transaction(\"ToBox\", \"readwrite\").objectStore(\"ToBox\") \n                    ToData.forEach(function (message){\n                        txt.add(message);\n                    });\n                    UsersData.forEach(function (user){\n                        tx.add(user);\n                    });\n                    MessagesData.forEach(function (message){\n                        txm.add(message);\n                        console.log(\"mesages completed\")\n                    });\n                })\n        request.onerror= (e) => {\n            console.error(\"db error\" ,e.targer.errorCode)\n        }\n        request.onsuccess =(e)=>{\n            let db;\n            db = e.target.result;\n        }\n    //     request.onupgradeneeded = (e) => {\n    //         db = e.target.result;\n    //         if(!db.objectStoreNames.contains(\"Users\")) {\n    //         let objectStore = db.createObjectStore(\"Users\", {keyPath: \"email\"})\n    //         objectStore.createIndex(\"email\",\"email\", {unique: true});\n         \n    //         objectStore.transaction.oncomplete = (ev) => {\n    //             console.log(\"transaction\", ev);\n    //            let userStore= db.transaction(\"Users\", \"readwrite\").objectStore(\"Users\");\n    //            UsersData.forEach(function (user){\n    //                userStore.add(user);\n    //            });\n    //         }\n    //         if(!db.objectStoreNames.contains(\"Messages\")) {\n    //             let objectStore = db.createObjectStore(\"Messages\", {keyPath: \"mid\"})\n    //             objectStore.createIndex(\"fromMail\",\"fromMail\", {unique: false});\n    //             objectStore.createIndex(\"mid\",\"mid\", {unique: true});\n             \n    //             objectStore.transaction.oncomplete = (ev) => {\n    //                 console.log(\"transaction\", ev);\n    //                let messageStore= db.transaction(\"Messages\", \"readwrite\").objectStore(\"Messages\");\n    //                MessagesData.forEach(function (message){\n    //                    messageStore.add(message);\n    //                    console.log(\"mesages completed\")\n    //                });\n    //             }\n    //         }\n    //         if(!db.objectStoreNames.contains(\"ToBox\")) {\n    //             let objectStore = db.createObjectStore(\"ToBox\", {autoIncrement:true});\n    //             objectStore.createIndex(\"toMail\",\"toMail\", {unique: false});\n    //             objectStore.createIndex(\"mid\",\"mid\", {unique: false});\n             \n    //             objectStore.transaction.oncomplete = (ev) => {\n    //                 console.log(\"transaction\", ev);\n    //                let messageStore= db.transaction(\"ToBox\", \"readwrite\").objectStore(\"ToBox\");\n    //                ToData.forEach(function (message){\n    //                    messageStore.add(message);\n    //                });\n    //             }\n    //         }\n    //     }\n    //     request.then((e)=>{\n    //         let tx = e.transaction(\"Users\", \"readwrite\");\n    //         let store = tx.objectStore\n    //     })\n    //     }\n    // }\n}\n}\n\nfunction Login(){\n\n    return (\n        <div className=\"App-login\"> \n            <button onClick={createDb}> Create DB </button>\n        </div>\n    );\n\n};\n\nexport default Login;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     {/* <div className=\"App-header\"></div>  */}\n     {!window.localStorage.getItem(\"acessToken\")?\n      <Login /> : \n     <div className=\"App-dashboard\"> </div>\n     }\n</div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}